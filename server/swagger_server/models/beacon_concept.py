# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BeaconConcept(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, type: str=None, synonyms: List[str]=None, definition: str=None):  # noqa: E501
        """BeaconConcept - a model defined in Swagger

        :param id: The id of this BeaconConcept.  # noqa: E501
        :type id: str
        :param name: The name of this BeaconConcept.  # noqa: E501
        :type name: str
        :param type: The type of this BeaconConcept.  # noqa: E501
        :type type: str
        :param synonyms: The synonyms of this BeaconConcept.  # noqa: E501
        :type synonyms: List[str]
        :param definition: The definition of this BeaconConcept.  # noqa: E501
        :type definition: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'type': str,
            'synonyms': List[str],
            'definition': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'synonyms': 'synonyms',
            'definition': 'definition'
        }

        self._id = id
        self._name = name
        self._type = type
        self._synonyms = synonyms
        self._definition = definition

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconConcept':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconConcept of this BeaconConcept.  # noqa: E501
        :rtype: BeaconConcept
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BeaconConcept.

        local object identifier for the concept in the specified knowledge source database   # noqa: E501

        :return: The id of this BeaconConcept.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BeaconConcept.

        local object identifier for the concept in the specified knowledge source database   # noqa: E501

        :param id: The id of this BeaconConcept.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this BeaconConcept.

        canonical human readable name of the concept   # noqa: E501

        :return: The name of this BeaconConcept.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BeaconConcept.

        canonical human readable name of the concept   # noqa: E501

        :param name: The name of this BeaconConcept.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this BeaconConcept.

        concept semantic type   # noqa: E501

        :return: The type of this BeaconConcept.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this BeaconConcept.

        concept semantic type   # noqa: E501

        :param type: The type of this BeaconConcept.
        :type type: str
        """

        self._type = type

    @property
    def synonyms(self) -> List[str]:
        """Gets the synonyms of this BeaconConcept.

        list of synonyms for concept   # noqa: E501

        :return: The synonyms of this BeaconConcept.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: List[str]):
        """Sets the synonyms of this BeaconConcept.

        list of synonyms for concept   # noqa: E501

        :param synonyms: The synonyms of this BeaconConcept.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def definition(self) -> str:
        """Gets the definition of this BeaconConcept.

        concept definition   # noqa: E501

        :return: The definition of this BeaconConcept.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition: str):
        """Sets the definition of this BeaconConcept.

        concept definition   # noqa: E501

        :param definition: The definition of this BeaconConcept.
        :type definition: str
        """

        self._definition = definition
