# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.statement_object import StatementObject  # noqa: F401,E501
from swagger_server.models.statement_predicate import StatementPredicate  # noqa: F401,E501
from swagger_server.models.statement_subject import StatementSubject  # noqa: F401,E501
from swagger_server import util


class Statement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, subject: StatementSubject=None, predicate: StatementPredicate=None, object: StatementObject=None):  # noqa: E501
        """Statement - a model defined in Swagger

        :param id: The id of this Statement.  # noqa: E501
        :type id: str
        :param subject: The subject of this Statement.  # noqa: E501
        :type subject: StatementSubject
        :param predicate: The predicate of this Statement.  # noqa: E501
        :type predicate: StatementPredicate
        :param object: The object of this Statement.  # noqa: E501
        :type object: StatementObject
        """
        self.swagger_types = {
            'id': str,
            'subject': StatementSubject,
            'predicate': StatementPredicate,
            'object': StatementObject
        }

        self.attribute_map = {
            'id': 'id',
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object'
        }

        self._id = id
        self._subject = subject
        self._predicate = predicate
        self._object = object

    @classmethod
    def from_dict(cls, dikt) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Statement of this Statement.  # noqa: E501
        :rtype: Statement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Statement.

        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)  # noqa: E501

        :return: The id of this Statement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Statement.

        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)  # noqa: E501

        :param id: The id of this Statement.
        :type id: str
        """

        self._id = id

    @property
    def subject(self) -> StatementSubject:
        """Gets the subject of this Statement.


        :return: The subject of this Statement.
        :rtype: StatementSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject: StatementSubject):
        """Sets the subject of this Statement.


        :param subject: The subject of this Statement.
        :type subject: StatementSubject
        """

        self._subject = subject

    @property
    def predicate(self) -> StatementPredicate:
        """Gets the predicate of this Statement.


        :return: The predicate of this Statement.
        :rtype: StatementPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate: StatementPredicate):
        """Sets the predicate of this Statement.


        :param predicate: The predicate of this Statement.
        :type predicate: StatementPredicate
        """

        self._predicate = predicate

    @property
    def object(self) -> StatementObject:
        """Gets the object of this Statement.


        :return: The object of this Statement.
        :rtype: StatementObject
        """
        return self._object

    @object.setter
    def object(self, object: StatementObject):
        """Sets the object of this Statement.


        :param object: The object of this Statement.
        :type object: StatementObject
        """

        self._object = object
