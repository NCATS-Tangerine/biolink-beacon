# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BeaconConceptType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, iri: str=None, label: str=None, frequency: int=None):  # noqa: E501
        """BeaconConceptType - a model defined in Swagger

        :param id: The id of this BeaconConceptType.  # noqa: E501
        :type id: str
        :param iri: The iri of this BeaconConceptType.  # noqa: E501
        :type iri: str
        :param label: The label of this BeaconConceptType.  # noqa: E501
        :type label: str
        :param frequency: The frequency of this BeaconConceptType.  # noqa: E501
        :type frequency: int
        """
        self.swagger_types = {
            'id': str,
            'iri': str,
            'label': str,
            'frequency': int
        }

        self.attribute_map = {
            'id': 'id',
            'iri': 'iri',
            'label': 'label',
            'frequency': 'frequency'
        }

        self._id = id
        self._iri = iri
        self._label = label
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconConceptType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconConceptType of this BeaconConceptType.  # noqa: E501
        :rtype: BeaconConceptType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BeaconConceptType.

        the CURIE of the type  # noqa: E501

        :return: The id of this BeaconConceptType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BeaconConceptType.

        the CURIE of the type  # noqa: E501

        :param id: The id of this BeaconConceptType.
        :type id: str
        """

        self._id = id

    @property
    def iri(self) -> str:
        """Gets the iri of this BeaconConceptType.

        The full IRI, generally resolve the full semantic description of the type  # noqa: E501

        :return: The iri of this BeaconConceptType.
        :rtype: str
        """
        return self._iri

    @iri.setter
    def iri(self, iri: str):
        """Sets the iri of this BeaconConceptType.

        The full IRI, generally resolve the full semantic description of the type  # noqa: E501

        :param iri: The iri of this BeaconConceptType.
        :type iri: str
        """

        self._iri = iri

    @property
    def label(self) -> str:
        """Gets the label of this BeaconConceptType.

        human readable name (\"rdfs:label\")  # noqa: E501

        :return: The label of this BeaconConceptType.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this BeaconConceptType.

        human readable name (\"rdfs:label\")  # noqa: E501

        :param label: The label of this BeaconConceptType.
        :type label: str
        """

        self._label = label

    @property
    def frequency(self) -> int:
        """Gets the frequency of this BeaconConceptType.

        the number of concept entries of the specified type in the beacon knowledge base  # noqa: E501

        :return: The frequency of this BeaconConceptType.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this BeaconConceptType.

        the number of concept entries of the specified type in the beacon knowledge base  # noqa: E501

        :param frequency: The frequency of this BeaconConceptType.
        :type frequency: int
        """

        self._frequency = frequency
