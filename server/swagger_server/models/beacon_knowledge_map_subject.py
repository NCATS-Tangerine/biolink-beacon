# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BeaconKnowledgeMapSubject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, prefixes: List[str]=None):  # noqa: E501
        """BeaconKnowledgeMapSubject - a model defined in Swagger

        :param type: The type of this BeaconKnowledgeMapSubject.  # noqa: E501
        :type type: str
        :param prefixes: The prefixes of this BeaconKnowledgeMapSubject.  # noqa: E501
        :type prefixes: List[str]
        """
        self.swagger_types = {
            'type': str,
            'prefixes': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'prefixes': 'prefixes'
        }

        self._type = type
        self._prefixes = prefixes

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconKnowledgeMapSubject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconKnowledgeMapSubject of this BeaconKnowledgeMapSubject.  # noqa: E501
        :rtype: BeaconKnowledgeMapSubject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this BeaconKnowledgeMapSubject.

        the concept semantic type of a statement subject   # noqa: E501

        :return: The type of this BeaconKnowledgeMapSubject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this BeaconKnowledgeMapSubject.

        the concept semantic type of a statement subject   # noqa: E501

        :param type: The type of this BeaconKnowledgeMapSubject.
        :type type: str
        """

        self._type = type

    @property
    def prefixes(self) -> List[str]:
        """Gets the prefixes of this BeaconKnowledgeMapSubject.


        :return: The prefixes of this BeaconKnowledgeMapSubject.
        :rtype: List[str]
        """
        return self._prefixes

    @prefixes.setter
    def prefixes(self, prefixes: List[str]):
        """Sets the prefixes of this BeaconKnowledgeMapSubject.


        :param prefixes: The prefixes of this BeaconKnowledgeMapSubject.
        :type prefixes: List[str]
        """

        self._prefixes = prefixes
