# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BeaconConceptCategory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, uri: str=None, category: str=None, local_id: str=None, local_uri: str=None, local_category: str=None, description: str=None, frequency: int=None):  # noqa: E501
        """BeaconConceptCategory - a model defined in Swagger

        :param id: The id of this BeaconConceptCategory.  # noqa: E501
        :type id: str
        :param uri: The uri of this BeaconConceptCategory.  # noqa: E501
        :type uri: str
        :param category: The category of this BeaconConceptCategory.  # noqa: E501
        :type category: str
        :param local_id: The local_id of this BeaconConceptCategory.  # noqa: E501
        :type local_id: str
        :param local_uri: The local_uri of this BeaconConceptCategory.  # noqa: E501
        :type local_uri: str
        :param local_category: The local_category of this BeaconConceptCategory.  # noqa: E501
        :type local_category: str
        :param description: The description of this BeaconConceptCategory.  # noqa: E501
        :type description: str
        :param frequency: The frequency of this BeaconConceptCategory.  # noqa: E501
        :type frequency: int
        """
        self.swagger_types = {
            'id': str,
            'uri': str,
            'category': str,
            'local_id': str,
            'local_uri': str,
            'local_category': str,
            'description': str,
            'frequency': int
        }

        self.attribute_map = {
            'id': 'id',
            'uri': 'uri',
            'category': 'category',
            'local_id': 'local_id',
            'local_uri': 'local_uri',
            'local_category': 'local_category',
            'description': 'description',
            'frequency': 'frequency'
        }

        self._id = id
        self._uri = uri
        self._category = category
        self._local_id = local_id
        self._local_uri = local_uri
        self._local_category = local_category
        self._description = description
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconConceptCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconConceptCategory of this BeaconConceptCategory.  # noqa: E501
        :rtype: BeaconConceptCategory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BeaconConceptCategory.

        the CURIE of the concept category  # noqa: E501

        :return: The id of this BeaconConceptCategory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BeaconConceptCategory.

        the CURIE of the concept category  # noqa: E501

        :param id: The id of this BeaconConceptCategory.
        :type id: str
        """

        self._id = id

    @property
    def uri(self) -> str:
        """Gets the uri of this BeaconConceptCategory.

        The category URI which should generally resolves to  the full semantic description of the category  # noqa: E501

        :return: The uri of this BeaconConceptCategory.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this BeaconConceptCategory.

        The category URI which should generally resolves to  the full semantic description of the category  # noqa: E501

        :param uri: The uri of this BeaconConceptCategory.
        :type uri: str
        """

        self._uri = uri

    @property
    def category(self) -> str:
        """Gets the category of this BeaconConceptCategory.

        human readable name (\"rdfs:label\")  # noqa: E501

        :return: The category of this BeaconConceptCategory.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this BeaconConceptCategory.

        human readable name (\"rdfs:label\")  # noqa: E501

        :param category: The category of this BeaconConceptCategory.
        :type category: str
        """

        self._category = category

    @property
    def local_id(self) -> str:
        """Gets the local_id of this BeaconConceptCategory.

        the locally designated CURIE of the concept category  # noqa: E501

        :return: The local_id of this BeaconConceptCategory.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id: str):
        """Sets the local_id of this BeaconConceptCategory.

        the locally designated CURIE of the concept category  # noqa: E501

        :param local_id: The local_id of this BeaconConceptCategory.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def local_uri(self) -> str:
        """Gets the local_uri of this BeaconConceptCategory.

        This locally designated category URI should generally resolve to the full semantic description of the category  # noqa: E501

        :return: The local_uri of this BeaconConceptCategory.
        :rtype: str
        """
        return self._local_uri

    @local_uri.setter
    def local_uri(self, local_uri: str):
        """Sets the local_uri of this BeaconConceptCategory.

        This locally designated category URI should generally resolve to the full semantic description of the category  # noqa: E501

        :param local_uri: The local_uri of this BeaconConceptCategory.
        :type local_uri: str
        """

        self._local_uri = local_uri

    @property
    def local_category(self) -> str:
        """Gets the local_category of this BeaconConceptCategory.

        human readable local semantic type name (\"rdfs:label\")  # noqa: E501

        :return: The local_category of this BeaconConceptCategory.
        :rtype: str
        """
        return self._local_category

    @local_category.setter
    def local_category(self, local_category: str):
        """Sets the local_category of this BeaconConceptCategory.

        human readable local semantic type name (\"rdfs:label\")  # noqa: E501

        :param local_category: The local_category of this BeaconConceptCategory.
        :type local_category: str
        """

        self._local_category = local_category

    @property
    def description(self) -> str:
        """Gets the description of this BeaconConceptCategory.

        human readable name definition of the category  # noqa: E501

        :return: The description of this BeaconConceptCategory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BeaconConceptCategory.

        human readable name definition of the category  # noqa: E501

        :param description: The description of this BeaconConceptCategory.
        :type description: str
        """

        self._description = description

    @property
    def frequency(self) -> int:
        """Gets the frequency of this BeaconConceptCategory.

        the number of concept entries of the specified type in the beacon knowledge base  # noqa: E501

        :return: The frequency of this BeaconConceptCategory.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this BeaconConceptCategory.

        the number of concept entries of the specified type in the beacon knowledge base  # noqa: E501

        :param frequency: The frequency of this BeaconConceptCategory.
        :type frequency: int
        """

        self._frequency = frequency
